version: '3.8'

services:
  # Main fraud detection API service
  fraud-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-1.0.0}
    container_name: fraud-detection-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - APP_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      # Mount model directory (models should be pre-trained)
      - ./models:/app/models:ro
      # Mount data directory (for dataset access)
      - ./data:/app/data:ro
      # Mount results directory (for generated outputs)
      - ./results:/app/results:rw
      # Mount logs directory
      - ./logs:/app/logs:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fraud-detection
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Training service (run on-demand)
  fraud-trainer:
    build:
      context: .
      dockerfile: Dockerfile
      target: training
    container_name: fraud-detection-trainer
    environment:
      - APP_ENV=training
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      # Mount data directory (must contain dataset)
      - ./data:/app/data:ro
      # Mount models directory (for saving trained models)
      - ./models:/app/models:rw
      # Mount results directory (for visualizations)
      - ./results:/app/results:rw
      # Mount logs directory
      - ./logs:/app/logs:rw
    networks:
      - fraud-detection
    profiles:
      - training  # Only start with --profile training
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Test service (run on-demand)
  fraud-tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: fraud-detection-tests
    environment:
      - APP_ENV=test
      - LOG_LEVEL=DEBUG
    volumes:
      - ./tests:/app/tests:ro
      - ./src:/app/src:ro
      - ./api:/app/api:ro
      - ./logs:/app/logs:rw
    networks:
      - fraud-detection
    profiles:
      - testing  # Only start with --profile testing
    command: ["python", "-m", "pytest", "tests/", "-v", "--cov=src", "--cov=api"]

  # Monitoring service (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud-detection-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fraud-detection
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana service (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fraud-detection-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - fraud-detection
    profiles:
      - monitoring
    restart: unless-stopped

networks:
  fraud-detection:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: